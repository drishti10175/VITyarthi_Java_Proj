package edu.ccrm.service;

import edu.ccrm.domain.Course;
import edu.ccrm.domain.Semester;
import edu.ccrm.domain.Searchable;

import java.util.*;
import java.util.stream.Collectors;

public class CourseService implements Searchable<Course> {
    private final Map<String, Course> courses;
    
    public CourseService() {
        this.courses = new HashMap<>();
    }
    
    public void addCourse(Course course) {
        Objects.requireNonNull(course);
        if (courses.containsKey(course.getCode())) {
            throw new IllegalArgumentException("Course with code " + course.getCode() + " already exists");
        }
        courses.put(course.getCode(), course);
    }
    
    public Optional<Course> getCourse(String code) {
        return Optional.ofNullable(courses.get(code));
    }
    
    public List<Course> getAllCourses() {
        return new ArrayList<>(courses.values());
    }
    
    public List<Course> getActiveCourses() {
        return courses.values().stream()
                .filter(Course::isActive)
                .collect(Collectors.toList());
    }
    
    public boolean updateCourse(String code, String instructor, Semester semester, String department) {
        Course course = courses.get(code);
        if (course != null) {
            course.setInstructor(instructor);
            course.setSemester(semester);
            course.setDepartment(department);
            return true;
        }
        return false;
    }
    
    public boolean deactivateCourse(String code) {
        Course course = courses.get(code);
        if (course != null) {
            course.setActive(false);
            return true;
        }
        return false;
    }
    
    @Override
    public List<Course> search(String query) {
        String lowerQuery = query.toLowerCase();
        return courses.values().stream()
                .filter(course -> course.getCode().toLowerCase().contains(lowerQuery) ||
                                 course.getTitle().toLowerCase().contains(lowerQuery) ||
                                 course.getInstructor().toLowerCase().contains(lowerQuery) ||
                                 course.getDepartment().toLowerCase().contains(lowerQuery))
                .collect(Collectors.toList());
    }
    
    public List<Course> filterByInstructor(String instructor) {
        return courses.values().stream()
                .filter(course -> course.getInstructor().equalsIgnoreCase(instructor))
                .collect(Collectors.toList());
    }
    
    public List<Course> filterByDepartment(String department) {
        return courses.values().stream()
                .filter(course -> course.getDepartment().equalsIgnoreCase(department))
                .collect(Collectors.toList());
    }
    
    public List<Course> filterBySemester(Semester semester) {
        return courses.values().stream()
                .filter(course -> course.getSemester() == semester)
                .collect(Collectors.toList());
    }
}
